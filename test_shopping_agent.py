#!/usr/bin/env python3
"""
Test Phase 4: Shopping Agent & Order Management

This script tests the new shopping agent and automated ordering functionality.
"""

import asyncio
import sys
import os

# Add src to path for imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

async def test_phase_4():
    print("üõçÔ∏è Testing Phase 4: Shopping Agent & Order Management")
    print("=" * 60)
    
    try:
        # Test 1: Shopping Agent Basic Functionality
        print("\nü§ñ Test 1: Shopping Agent")
        from src.agents.shopping_agent import shopping_agent
        
        test_user_id = 1
        
        print("   Testing shopping agent initialization...")
        print(f"   ‚úÖ Agent name: {shopping_agent.name}")
        print(f"   ‚úÖ Capabilities: {len(shopping_agent.capabilities)} features")
        
        for capability in shopping_agent.capabilities:
            print(f"      ‚Ä¢ {capability}")
        
        # Test 2: Smart Shopping List Creation
        print("\nüìù Test 2: Smart Shopping List Creation")
        
        print("   Creating smart shopping list...")
        shopping_list_result = await shopping_agent.create_smart_shopping_list(test_user_id)
        
        if "error" not in shopping_list_result:
            summary = shopping_list_result.get("list_summary", {})
            print(f"   ‚úÖ Shopping list created:")
            print(f"      ‚Ä¢ Items: {summary.get('total_items', 0)}")
            print(f"      ‚Ä¢ Estimated cost: ${summary.get('estimated_total_cost', 0):.2f}")
            print(f"      ‚Ä¢ Categories: {', '.join(summary.get('categories', []))}")
            
            # Show a few items
            items = shopping_list_result.get("shopping_list", [])
            if items:
                print(f"   üì¶ Sample items:")
                for item in items[:3]:
                    print(f"      ‚Ä¢ {item.get('quantity', 1)} {item.get('unit', '')} {item.get('item', 'Unknown')}")
        else:
            print(f"   ‚ùå Shopping list error: {shopping_list_result['error']}")
        
        # Test 3: Shopping List Optimization
        print("\n‚ö° Test 3: Shopping List Optimization")
        
        print("   Testing shopping list optimization...")
        optimization_result = await shopping_agent.optimize_shopping_list(test_user_id)
        
        if "error" not in optimization_result:
            print("   ‚úÖ Optimization completed:")
            opt_results = optimization_result.get("optimization_results", {})
            opt_summary = opt_results.get("optimization_summary", {})
            print(f"      ‚Ä¢ Best store: {opt_summary.get('best_store', 'N/A')}")
            print(f"      ‚Ä¢ Best total: ${opt_summary.get('best_total', 0):.2f}")
            print(f"      ‚Ä¢ Coverage: {opt_summary.get('coverage', 'N/A')}")
        else:
            print(f"   ‚ö†Ô∏è  Optimization result: {optimization_result.get('error')}")
        
        # Test 4: Deal Finding
        print("\nüí∞ Test 4: Deal Finding")
        
        print("   Finding current deals...")
        deals_result = await shopping_agent.find_current_deals(test_user_id)
        
        if "error" not in deals_result:
            deals_summary = deals_result.get("deals_summary", {})
            print(f"   ‚úÖ Deal search completed:")
            print(f"      ‚Ä¢ Deals found: {deals_summary.get('deals_found', 0)}")
            print(f"      ‚Ä¢ Total savings: ${deals_summary.get('total_potential_savings', 0):.2f}")
            print(f"      ‚Ä¢ Items checked: {deals_result.get('items_checked', 0)}")
        else:
            print(f"   ‚ö†Ô∏è  Deal search result: {deals_result.get('error')}")
        
        # Test 5: Order Management Service
        print("\nüì¶ Test 5: Order Management Service")
        from src.services.order_service import order_service
        
        print("   Testing order service initialization...")
        print(f"   ‚úÖ Supported services: {list(order_service.supported_services.keys())}")
        
        # Test order creation if we have a shopping list
        if "shopping_list_id" in shopping_list_result:
            shopping_list_id = shopping_list_result["shopping_list_id"]
            
            print(f"   Creating demo order from shopping list {shopping_list_id}...")
            order_result = await order_service.create_order_from_shopping_list(
                user_id=test_user_id,
                shopping_list_id=shopping_list_id,
                delivery_service="instacart",
                auto_confirm=True
            )
            
            if "error" not in order_result:
                print("   ‚úÖ Demo order created:")
                print(f"      ‚Ä¢ Order number: {order_result.get('order_number')}")
                print(f"      ‚Ä¢ Service: {order_result.get('service')}")
                print(f"      ‚Ä¢ Total: ${order_result.get('order_summary', {}).get('total', 0):.2f}")
                print(f"      ‚Ä¢ Status: {order_result.get('status')}")
                
                # Test order tracking
                if "order_id" in order_result:
                    print("   Testing order tracking...")
                    tracking_result = await order_service.track_order(
                        test_user_id, 
                        order_result["order_id"]
                    )
                    
                    if "error" not in tracking_result:
                        print(f"      ‚Ä¢ Current status: {tracking_result.get('current_status')}")
                        print(f"      ‚Ä¢ Message: {tracking_result.get('status_message')}")
                    else:
                        print(f"      ‚ùå Tracking error: {tracking_result['error']}")
            else:
                print(f"   ‚ö†Ô∏è  Order creation: {order_result.get('error')}")
        
        # Test 6: Integration with Master Agent
        print("\nüé≠ Test 6: Master Agent Integration")
        from src.agents.master_agent import master_agent
        
        shopping_messages = [
            "Create a shopping list for me",
            "Find me the best grocery deals",
            "Optimize my shopping list for savings",
            "Which store should I shop at for the best prices?",
            "Help me save money on groceries"
        ]
        
        for i, message in enumerate(shopping_messages[:3], 1):  # Test first 3
            print(f"   Testing message {i}: '{message}'")
            try:
                response = await master_agent.process_user_message(test_user_id, message)
                if response.get("success", True):
                    response_text = response.get("response", "")
                    print(f"   ‚úÖ Response generated ({len(response_text)} chars)")
                    agent_used = response.get("agent_used", "unknown")
                    print(f"      ‚Ä¢ Agent: {agent_used}")
                else:
                    print(f"   ‚ùå Response error: {response.get('error')}")
            except Exception as e:
                print(f"   ‚ùå Processing error: {e}")
        
        # Test 7: Order History
        print("\nüìä Test 7: Order History")
        
        print("   Getting order history...")
        history_result = await order_service.get_order_history(test_user_id)
        
        if "error" not in history_result:
            print("   ‚úÖ Order history retrieved:")
            print(f"      ‚Ä¢ Total orders: {history_result.get('total_orders', 0)}")
            print(f"      ‚Ä¢ Total spent: ${history_result.get('total_spent', 0):.2f}")
            print(f"      ‚Ä¢ Average order: ${history_result.get('average_order', 0):.2f}")
        else:
            print(f"   ‚ö†Ô∏è  History result: {history_result.get('message', 'Error')}")
        
        # Test 8: Recurring Order Scheduling
        print("\nüîÑ Test 8: Recurring Order Scheduling")
        
        if "shopping_list_id" in shopping_list_result:
            shopping_list_id = shopping_list_result["shopping_list_id"]
            
            print("   Scheduling recurring weekly order...")
            recurring_result = await order_service.schedule_recurring_order(
                user_id=test_user_id,
                shopping_list_id=shopping_list_id,
                frequency="weekly",
                delivery_service="instacart"
            )
            
            if "error" not in recurring_result:
                print("   ‚úÖ Recurring order scheduled:")
                print(f"      ‚Ä¢ Frequency: {recurring_result.get('frequency')}")
                print(f"      ‚Ä¢ Service: {recurring_result.get('delivery_service')}")
                print(f"      ‚Ä¢ Status: {recurring_result.get('status')}")
                print(f"      ‚Ä¢ Next order: {recurring_result.get('next_order_estimate', 'N/A')[:10]}")
            else:
                print(f"   ‚ùå Recurring order error: {recurring_result.get('error')}")
        
        # Test 9: Shopping Route Planning
        print("\nüó∫Ô∏è Test 9: Shopping Route Planning")
        
        print("   Planning optimal shopping route...")
        route_result = await shopping_agent.plan_shopping_route(test_user_id)
        
        if "error" not in route_result:
            route_plan = route_result.get("route_plan", {})
            optimal_route = route_plan.get("optimal_route", [])
            print("   ‚úÖ Shopping route planned:")
            print(f"      ‚Ä¢ Stores to visit: {len(optimal_route)}")
            print(f"      ‚Ä¢ Estimated total time: {route_plan.get('estimated_total_time', 'N/A')}")
            
            if optimal_route:
                print("   üè™ Store sequence:")
                for store in optimal_route[:2]:  # Show first 2 stores
                    print(f"      {store.get('order', '?')}. {store.get('store', 'Unknown')} ({store.get('estimated_time', 'N/A')})")
        else:
            print(f"   ‚ùå Route planning error: {route_result.get('error')}")
        
        # Test 10: Complete Shopping Workflow
        print("\nüîÑ Test 10: Complete Shopping Workflow")
        
        workflow_steps = [
            "1. Create meal plan",
            "2. Generate shopping list", 
            "3. Optimize for best prices",
            "4. Find current deals",
            "5. Plan shopping route",
            "6. Create order (demo)",
            "7. Track order status"
        ]
        
        print("   Complete shopping workflow includes:")
        for step in workflow_steps:
            print(f"      ‚úÖ {step}")
        
        print("   üéØ All workflow components are now integrated!")
        
        # Summary
        print("\nüéâ Phase 4 Summary")
        print("=" * 60)
        print("‚úÖ Shopping Agent: Created and functional")
        print("‚úÖ Order Management Service: Implemented")
        print("‚úÖ Smart Shopping Lists: AI-generated with price data")
        print("‚úÖ Cost Optimization: Multi-store comparison")
        print("‚úÖ Deal Finding: Automated savings discovery")
        print("‚úÖ Route Planning: Efficient shopping strategies")
        print("‚úÖ Order Automation: Demo ordering system")
        print("‚úÖ Recurring Orders: Scheduled automation")
        print("‚úÖ Master Agent Integration: Seamless AI conversations")
        
        print("\nüéØ New Capabilities Added:")
        print("‚Ä¢ Intelligent shopping list creation from meal plans")
        print("‚Ä¢ Real-time price optimization across stores")
        print("‚Ä¢ Automated deal finding and savings calculation")
        print("‚Ä¢ Smart shopping route planning")
        print("‚Ä¢ Demo grocery ordering and tracking")
        print("‚Ä¢ Recurring order automation")
        print("‚Ä¢ Comprehensive order history and analytics")
        
        print("\nüöÄ Your Grocery AI is now a complete shopping assistant!")
        print("It can plan meals, find deals, create optimized shopping lists,")
        print("and even handle automated ordering (in demo mode).")
        
        # Interactive demo
        print("\nüîß Interactive Shopping Demo")
        print("Type messages to test shopping features (type 'quit' to exit):")
        
        while True:
            try:
                user_input = input("\n> ").strip()
                if user_input.lower() in ['quit', 'exit', 'q']:
                    break
                    
                if not user_input:
                    continue
                
                # Process with master agent
                print("Processing...")
                response = await master_agent.process_user_message(test_user_id, user_input)
                
                response_text = response.get('response', 'No response generated')
                print(f"\nü§ñ {response_text}")
                
                # Show which agent handled the request
                agent_used = response.get('agent_used', 'unknown')
                if agent_used != 'unknown':
                    print(f"\nüé≠ Handled by: {agent_used} agent")
                
                if response.get("suggestions"):
                    print(f"\nüí° Suggestions: {', '.join(response['suggestions'])}")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
        
        print("\nüëã Phase 4 testing completed!")
        print("Your grocery AI system now includes:")
        print("‚Ä¢ Meal Planning Agent (Phase 2)")
        print("‚Ä¢ Price Intelligence (Phase 3)")  
        print("‚Ä¢ Shopping Assistant (Phase 4)")
        print("‚Ä¢ Complete end-to-end grocery automation!")
        
    except Exception as e:
        print(f"\n‚ùå Phase 4 test failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = asyncio.run(test_phase_4())
    sys.exit(0 if success else 1)